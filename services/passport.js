const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');
//here we are consuming the model

passport.serializeUser((user, done) => {
  done(null, user.id);
  // this is is not the same as profile id, but
  // the id coming from the record on the DB
  // unique identifier automatically
  // generated by Mongo
  // this is the piece that will
  // identify users in further requests
  // So we pull it back to store it in the cookie
});

passport.deserializeUser((id, done) => {
  // the id is coming from the
  // user record (user.id)
  User.findById(id).then(user => {
    done(null, user);
  });

  // here we extract the info
  // from the cookie to validate the user
  // and check if that user is our records
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      User.findOne({ googleId: profile.id }).then(existingUser => {
        if (existingUser) {
          // we already have a record with a given profile ID
          // console.log(existingUser)
          // console.log(typeof(existingUser))
          done(null, existingUser);
        } else {
          const user = new User({ googleId: profile.id })
            .save()
            .then(user => done(null, user));
          done();
        }
        // we don't have a user
      });
      // this query freturns a Promise, because this connection with
      // the DB is asynchronous
    }
  )
);
